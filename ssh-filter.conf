 filter {
  # Regla 1. Usuarios válidos o existentes en el sistema 
  grok {
    match => { "message" => "%{SYSLOGTIMESTAMP:timestamp}\s+%{IPORHOST:dst_host}\s+%{WORD:syslog_program}\[\d+\]:\s+(?<status>\w+\s+password)\s+for\s+%{USER:auth_user}\s+from\s+%{SYSLOGHOST:src_host}.*" }
    add_field => { "activity" => "SSH Logins" }
    add_tag => "linux_auth"
    }
  # Regla 2. Si en la regla 1 no hay coincidencias, se aplica la regla 2 (usuarios no válidos)
  if "_grokparsefailure" in [tags] {
    grok {
      # Se elimina/limpia (remove_tag) para que se pueda establecer de nuevo en caso de no haber coincidencias en este match.
      remove_tag => [ "_grokparsefailure" ]
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp}\s+%{IPORHOST:dst_host}\s+%{WORD:syslog_program}\[\d+\]:\s+(?<status>\w+\s+password)\s+for\s+invalid\s+user\s+%{USER:auth_user}\s+from\s+%{SYSLOGHOST:src_host}.*" }
      add_tag => [ "ssh_brute_force_attack", "filter_sshd","correlation" ]
      add_field => { "EventDesc" => "5710 SSHD Attempt to login using a non-existent user" }
      add_field => { "event_id" => "5710" }
    }
    # Si en la regla 2 no hay coincidencias, se descartan todos los eventos (drop)
    # Si no se hace esto, aparecerían los eventos del tipo:
     # pam_unix(sshd:auth): check pass; user unknown
     # pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=192.168.0.10
     # etcétera.
    if "_grokparsefailure" in [tags] { drop {} }
  }
}
